# Heightmap generation examples
#

# Bumpiness training terrain

im=n[0.3]*0+n[1]*0+np.maximum(0.0,n[10])**(xgrad*3+0.01)*ygrad
plt.imshow(im)
im = im *0.5
skimage.io.imsave("heightmaps/bumps1.png",(im*255).astype(dtype=np.uint8))

# Bumpiness training terrain
im=n[0.3]*0+n[1]*2+n[20]*xgrad*0.3+np.maximum(+0.5,n[50])*0.5*ygrad
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
plt.imshow(im)
im = im *0.8
skimage.io.imsave("heightmaps/bumps2.png",(im*255).astype(dtype=np.uint8)) 

#%% Holes
im=np.minimum(0,n[20]+0.5)*1*xgrad+np.minimum(0,n[50]+0.5)*0.5*ygrad
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
skimage.io.imsave("heightmaps/holes1.png",(im*255).astype(dtype=np.uint8)) 

#%% Holes
im=np.minimum(0,n[5]+0.5)*2*xgrad+np.minimum(0,n[50]+0.9)*0.5*ygrad
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
skimage.io.imsave("heightmaps/holes2.png",(im*255).astype(dtype=np.uint8)) 

#%% slope + rocks
im=xgrad**2*2+np.maximum(+0.5,n[10])*0.2*ygrad
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
skimage.io.imsave("heightmaps/slope_rocks1.png",(im*255).astype(dtype=np.uint8)) 

#%% slope + rocks
im=xgrad**2*1+np.maximum(+0.5,n[50])*0.2*ygrad
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
skimage.io.imsave("heightmaps/slope_rocks2.png",(im*255).astype(dtype=np.uint8)) 

#%% slope + rocks
im=xgrad**2*1+np.maximum(+0.5,n[50])*1*ygrad
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
skimage.io.imsave("heightmaps/slope_rocks3.png",(im*255).astype(dtype=np.uint8)) 

#%% steps
im=np.clip(n[10]*(ygrad*20+1),0,1)*xgrad*0.2
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
im = im *0.5
skimage.io.imsave("heightmaps/steps1.png",(im*255).astype(dtype=np.uint8)) 

#%% steps
im=np.clip(n[5]*(ygrad*10+1),0,1)*xgrad*0.1
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
im = im *0.5
skimage.io.imsave("heightmaps/steps2.png",(im*255).astype(dtype=np.uint8)) 

#%% rails
im=(np.clip((n[5]*40*ygrad)**2,0,1)-1)*xgrad*0.2
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
skimage.io.imsave("heightmaps/rails1.png",(im*255).astype(dtype=np.uint8)) 

#%% rails
im=(np.clip((n[5]*5*ygrad)**2,0,1)-1)*xgrad*0.2
plt.imshow(im)
im = im + np.abs(np.min(im))
im = im/(np.max(im)-np.min(im))
im = im *0.5
skimage.io.imsave("heightmaps/rails2.png",(im*255).astype(dtype=np.uint8)) 

#%% bumps
im=-im
plt.imshow(im)


#%% For puzzle-like maps
#bars different sizes
import scipy.ndimage

noise=n[5]
lines= np.bitwise_or(
        np.diff(np.sign(np.hstack((noise,noise[:,[-1]]))),axis=1)!=0,
        np.diff(np.sign(np.vstack((noise,noise[[-1],:]))),axis=0)!=0)
distances=scipy.ndimage.morphology.distance_transform_edt(np.invert(lines),sampling=0.02)

minwidth= 0.02 / 2 # this variable is double the minwidth
maxwidth= 0.30 / 2 # this variable is double the maxwidth
minheight=0.03
maxheight=0.30

steps=distances<xgrad*(maxwidth-minwidth)+minwidth
steps=steps*(ygrad*(maxheight-minheight)+minheight)
plt.imshow(steps)
im = steps
skimage.io.imsave("heightmaps/bars.png",(im*255).astype(dtype=np.uint8)) 